input {
  file {
    path =>  [ "/LKTransfer/CRSP_CE_IN*" ]
    start_position => "beginning"
    #sincedb_path => "NUL" 
    codec => multiline {
          pattern => "^%{TIMESTAMP_ISO8601}"
          negate => true
          what => "previous"
        }
  }
}

filter {

    if ([message] =~ /^\s*$/) {
      drop { }
    }

    if ([message] =~ "LOG START" or [message] =~ "---------------------------------------------") {
      drop { }
  }

  if ([message] =~ "LOG STOP") {
      drop { }
  }

  mutate {
        gsub => [
          "message", "\n", " "
        ]
      }

    grok {
       match => {
         "message" => "^%{TIMESTAMP_ISO8601:occurred}%{SPACE}\[%{DATA:thread_id}\]%{SPACE}%{LOGLEVEL:log_level}%{SPACE}-%{SPACE}%{GREEDYDATA:log_message}$"
        }
       remove_field => ["message"]
    }

  #tag every events with channel name
  if [path] =~ "WorkQueue"{
    mutate { add_tag => "workqueue-logs" }
  }
  if [path] =~ "Pickup"{
    mutate { add_tag => "pickup-logs" }
  }
  if [path] =~ "Delivery"{
    mutate { add_tag => "delivery-logs" }
  }

  #parsing tcp logs
  if [log_message] =~ "active streams remain" {
      grok {
       match => {
         "log_message" => "%{NUMBER:active_streams:int} %{WORD}"
        }
    }
    mutate { add_tag => "active-streams-update" }
  }

 #parsing tcp logs
  if [log_message] =~ " connected" and [log_level] != "ERROR" {
      grok {
           match => {
             "log_message" => "%{IPORHOST:ip}:%{POSINT:port}%{SPACE}%{WORD}"
            }
        }
    mutate { add_tag => "new-connection" }
  }
  if ([log_message] =~ "Queueing message" and [log_message] =~ "\"MSH\|"){
    grok {
       match => {
         "log_message" => "^Queueing message%{SPACE}'%{DATA:file_name}'%{SPACE}%{GREEDYDATA}$"
        }
    }
    mutate { add_tag => "file-pickedup" }
  }
  if [log_message] =~ "socket disconnected" and [log_level] != "ERROR" {
    mutate { add_tag => "disconnected" }
  }
  if [log_message] =~ "success ack:" and [log_level] != "ERROR" {
    mutate { add_tag => "send-ack" }
  }
  
  #parsing for workqueue and delivery logs
  if ([log_message] =~ ".txt -") {
    grok {
       match => {
         "log_message" => "^%{DATA:file_name}%{SPACE}-%{SPACE}%{GREEDYDATA}$"
        }
    }
  }

  if [log_message] =~ "Marking" {
    grok {
       match => {
         "log_message" => "^Marking%{SPACE}%{DATA:file_name}%{SPACE}as%{SPACE}%{DATA:file_status}$"
        }
    }
    mutate { add_tag => "file-status" }
  } 

    if ([log_message] =~ "Completed upload of") {
      grok {
             match => {
               "log_message" => "Completed%{SPACE}upload%{SPACE}of%{SPACE}'%{DATA:file_name}'%{SPACE}in%{SPACE}%{NUMBER:file_upload_time_ms:int}ms."
              }
          }
      mutate { add_tag => "file-uploaded" }
    }

  if ([log_message] =~ "File Processed in") {
      grok {
       match => {
         "log_message" => "%{WORD} %{NUMBER:file_processed_time_ms:int} %{WORD}"
        }
    }
    mutate { add_tag => "file-processed" }
  }

  if [log_message] =~ "Web service response received" {
    grok {
         match => {
           "log_message" => "%{WORD} %{NUMBER:webservice_response_time_ms:int}%{DATA}"
          }
    }
    mutate { add_tag => "file-processed" }
  }

  #Need to check this is working or not
  if [log_message] =~ "Received" and  [log_message] =~ "message\(s\)" {
      grok {
       match => {
         "log_message" => "%{WORD} %{NUMBER:messages_received:int} %{WORD}"
        }
    }
    mutate { add_tag => "messages_received" }
  }

  if [log_message] =~ "Metadata: " {
        grok {
           match => {
             "log_message" => "%{GREEDYDATA} Id = %{DATA:lkws_metadata_id}, AccountNumber = %{DATA:lkws_metadata_acct_no} %{GREEDYDATA}"
            }
        }
        mutate { add_tag => "metadata" }
    }

  mutate {
      rename => {
       "@timestamp" => "read_timestamp"
      }
     }
    
     date {
      match => [
       "occurred",
       "yyyy-MM-dd HH:mm:ss,SSS"
      ]
      target => "@timestamp"
     }
}
 

output {
    elasticsearch {
        hosts => ["https://elasticsearch01:9200"]
        user => "${ELASTIC_USERNAME}"
        password => "${ELASTIC_PASSWORD}"
        ssl => true
        ssl_certificate_verification => true
        cacert => "${CONFIG_DIR}/ca.crt"
        index => "crsp-lktransfer-client-%{+yyyy.MM.dd}" 
    }
}
